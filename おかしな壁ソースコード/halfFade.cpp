/*=============================================================================

 ハーフフェード描画処理[ halfFade.cpp ]

=============================================================================*/
/*=============================================================================
インクルードヘッダ
=============================================================================*/
#include "manager.h"

#include "halfFade.h"

/*=============================================================================
 マクロ定義
=============================================================================*/
#define FADE_RATE (0.01f)

/*=============================================================================
 2D頂点情報構造体
=============================================================================*/
struct VERTEX_2D
{
	D3DXVECTOR3 pos;		// 座標位置
	float       rhw;		// 変換済み座標
	D3DCOLOR    col;		// 色
	D3DXVECTOR2 tex;		// テクスチャ座標
};

/*-----------------------------------------------------------------------------
 生成処理関数
-----------------------------------------------------------------------------*/
CHalfFade *CHalfFade::Create(int nTexType, D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXCOLOR color)
{
	// 変数クラス定義
	CHalfFade *pClass;

	// インスタンスの生成5
	pClass = new CHalfFade;

	// 初期化
	pClass->Init(nTexType, pos, size, color);

	// 返還
	return pClass;

}

/*-----------------------------------------------------------------------------
 初期化処理関数
-----------------------------------------------------------------------------*/
HRESULT CHalfFade::Init(int nTexType, D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXCOLOR color)
{
	m_Pos = pos;
	m_Size = size;
	m_nTexType = nTexType;

	m_Fade = FADE_NONE;
	m_Color = color;

	// オブジェクトの初期化
	CScene2D::Init();

	// 頂点情報を設定
	VERTEX_2D *pVtx = NULL;

	// 頂点バッファのロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// カラーの反映
	pVtx[0].col =
	pVtx[1].col =
	pVtx[2].col =
	pVtx[3].col = m_Color;

	// 頂点バッファのアンロック
	m_pVtxBuff->Unlock();

	// 正常終了
	return S_OK;

}

/*-----------------------------------------------------------------------------
 終了処理関数
-----------------------------------------------------------------------------*/
void CHalfFade::Uninit(void)
{
	// オブジェクト終了
	CScene2D::Uninit();

}

/*-----------------------------------------------------------------------------
 更新処理関数
-----------------------------------------------------------------------------*/
void CHalfFade::Update(void)
{
	//処理をしないで終了
	if (m_Fade == FADE_NONE) return;
	
	//フェードイン
	if (m_Fade == FADE_IN)
	{
		m_Color.a -= FADE_RATE;

		//終了判定
		if (m_Color.a <= 0.0f)
		{
			m_Color.a = 0.0f;
			//m_Fade = FADE_NONE;
		}//if.fin

	}//if.fin

	//フェードアウト
	if (m_Fade == FADE_OUT)
	{
		m_Color.a += FADE_RATE;

		//終了判定
		if (m_Color.a >= 0.5f)
		{
			m_Color.a = 0.5f;
			//m_Fade = FADE_IN;
		}//if.fin

	}//if.fin

	// 頂点情報を設定
	VERTEX_2D *pVtx = NULL;

	// 頂点バッファのロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// カラーの反映
	pVtx[0].col =
	pVtx[1].col =
	pVtx[2].col =
	pVtx[3].col = m_Color;

	// 頂点バッファのアンロック
	m_pVtxBuff->Unlock();

}

/*-----------------------------------------------------------------------------
 描画処理関数
-----------------------------------------------------------------------------*/
void CHalfFade::Draw(void)
{
	//描画せずに終了
	if (m_Fade == FADE_NONE) return;

	// オブジェクトの描画
	CScene2D::Draw();

}


