/*=============================================================================

 ウォールヘッダ[ wall.h ]

=============================================================================*/
/*-----------------------------------------------------------------------------
 インクルードガード
-----------------------------------------------------------------------------*/
#ifndef _WALL_H_
#define _WALL_H_

/*-----------------------------------------------------------------------------
 インクルードファイル
-----------------------------------------------------------------------------*/
#include "scene3D.h"

/*-----------------------------------------------------------------------------
 スキルタイプの列挙型定義
-----------------------------------------------------------------------------*/
enum SKILL
{
	SKILL_SWAP = 0,		// ０：スワップ：入れ替え
	SKILL_COPY,			// １：コピー  ：同化
	SKILL_SYNC			// ２：シンクロ：同期
};

/*-----------------------------------------------------------------------------
 ウォールクラス定義：シーン３Ｄ継承
-----------------------------------------------------------------------------*/
class CWall : public CScene3D
{
	protected:

		// スキルタイプ
		SKILL m_SkillType;

		// スキルタイプ設定
		void SetSkillType(SKILL skill) { m_SkillType = skill; }

	public:

		// コンストラクタ & デスクトラクタ
		CWall() { SetObjType(TYPE_WALL); }
		~CWall() {}

		// 生成関数
		static CWall *Create(int nTexType, D3DXVECTOR3 pos, D3DXVECTOR3 size, int nSkill);

		// 各処理関数
		HRESULT Init(int nTexType, D3DXVECTOR3 pos, D3DXVECTOR3 size, int nSkill);
		void    Uninit(void);
		void    Update(void);
		void    Draw(void);

		// 持っているスキルの使用判定
		virtual bool Skill(void) { return false; }

		// 持っているスキルの取得
		SKILL GetSkillType(void) { return m_SkillType; }

};

/*-----------------------------------------------------------------------------
 スワップクラス定義：ウォール継承
-----------------------------------------------------------------------------*/
class CSwap : public CWall
{
	private:

		bool Swap(void);

	public:

		// コンストラクタ & デスクトラクタ
		CSwap() { SetSkillType(SKILL_SWAP); }
		~CSwap() {}

		// スキル使用判定
		bool Skill(void) { return Swap(); }

};


/*-----------------------------------------------------------------------------
 コピークラス定義：ウォール継承
-----------------------------------------------------------------------------*/
class CCopy : public CWall
{
	private:

		bool Copy(void);

	public:

		// コンストラクタ & デスクトラクタ
		CCopy() { SetSkillType(SKILL_COPY); }
		~CCopy() {}

		// スキル使用判定
		bool Skill(void) { return Copy(); }

};

/*-----------------------------------------------------------------------------
 シンクロクラス定義：ウォール継承
-----------------------------------------------------------------------------*/
class CSync : public CWall
{
	private:

		bool Sync(void);
		bool m_SyncFrag;

	public:

		// コンストラクタ & デスクトラクタ
		CSync() 
		{ 
			SetSkillType(SKILL_SYNC);
			m_SyncFrag = false;
		}//end

		~CSync() {}

		// スキル更新
		void Update(void);

		// スキル使用判定
		bool Skill(void);

};

/*-----------------------------------------------------------------------------
 インクルードエンド
-----------------------------------------------------------------------------*/
#endif
