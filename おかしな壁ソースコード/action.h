/*=============================================================================

 行動処理ヘッダ[ action.h ]

=============================================================================*/
/*-----------------------------------------------------------------------------
 インクルードガード
-----------------------------------------------------------------------------*/
#ifndef _ACTION_H_
#define _ACTION_H_

/*-----------------------------------------------------------------------------
 インクルードファイル
-----------------------------------------------------------------------------*/
#include "manager.h"

/*-----------------------------------------------------------------------------
 マクロ定義
-----------------------------------------------------------------------------*/
// 秒換算(60 == FPS)
#define SECOND(_sec) ((_sec) * 60)

// 速度：1秒間で移動する距離から算出
#define M_S(_speed) (_speed / SECOND(1.0f))

// 加速度(m / s ^ 2)
#define M_S2(_acc) (_acc / SECOND(1.0f) * SECOND(1.0f))

// 最大速度：秒速４ｍ
#define MAX_SPEED (4.0f)

// 重力加速度(下向きなので負の値で設定)
#define GRAVITY -0.98f  //M_S2(-1.4f)

// 落下保護係数：現実の数値だと生存不可能なので…
#define FALLCARE (0.004f)

// 摩擦
#define FRICTION (0.15f)

/*-----------------------------------------------------------------------------
 クラス定義
-----------------------------------------------------------------------------*/
class CAction
{
	public:

		// 向きの列挙型
		enum DIR
		{
			DIR_RIGHT = 0,	// 右
			DIR_LEFT,		// 左
			DIR_UP,			// 上
			DIR_DOWN		// 下
		};

	private:

		DIR m_Dir;
		bool m_Skill;

	public:

		// コンストラクタ
		CAction() : m_Dir(DIR_RIGHT), m_Skill(false) {}

		// 横移動処理
		float Move(float moveX, float fSpeed, bool *bGround, bool *bItem);

		// ジャンプ処理
		float Jump(float moveY, float fJumpingFouce, bool *bGround);

		// 重力相殺：地面に接触状態時に好ましい
		static float Gravity(void)   { return GRAVITY * FALLCARE; }
		static float NoGravity(void) { return -GRAVITY * FALLCARE; }

		// 疑似慣性
		void Friction(float *fMove) { *fMove += (0.0f - (*fMove)) * FRICTION; }

		// スキル発動
		void Skill(D3DXVECTOR3 Pos, D3DXVECTOR3 Size);

		// 向きの取得
		DIR GetDir(void) { return m_Dir; }

};

/*-----------------------------------------------------------------------------
 インクルードエンド
-----------------------------------------------------------------------------*/
#endif
