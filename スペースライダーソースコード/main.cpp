/*******************************************************************************
* タイトル:		スペーススライダープログラム
* プログラム名:		main.cpp
* 作成者:		CP11SATA  15  Kim Nakamura
* 作成日:		2016/02/20
********************************************************************************
* 更新履歴:		- 2016/02/20　Kim Nakamura
*			- V1.00　Initial Version
*		
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*  必要な情報表示のための基本要素
*  	
*  	
*******************************************************************************/
#include "main.h"
#include "player.h"
#include "field.h"
#include "computer.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/
#define MINUTE (60)		// フレームのカウント

/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/
void Init   ( void );
void Update ( void );
void Draw   ( void );
void Uninit ( void );
bool Pause  ( bool bPause );

/*******************************************************************************
* グローバル変数
*******************************************************************************/
// FPSカウンタ
int g_nCountFPS;

/*******************************************************************************
 関数名:	int main( void )
 引数:		void
 戻り値:	なし
 説明:		FPSカウンタでのフレーム管理
*******************************************************************************/
int main( void )
{
	// プログラムスタート
	
	// 変数宣言
	DWORD dwExecLastTime;
	DWORD dwFPSLastTime;
	DWORD dwCurrentTime;
	int nCountFrame;

	bool bPause = false;		// Pause未使用

	// MP3 用格納変数宣言 //
	int nMP3Handle = ZERO_INT;

	// 構造体ポインタ変数宣言
	PLAYER *pPlayer;
	FIELD *pField;
	
	// 情報のコピーの取得
	pPlayer = GetPlayer();
	pField = GetField();
	
	// エスケープキーが押されるまでループ
	do
	{
		// ゲームのテーマ曲 //
		nMP3Handle = OPENMP3("TwinBee.mp3");					// オープン & 初期化
		PLAYMP3(nMP3Handle, 1);									// 繰り返し再生

		// 分解能を設定
		timeBeginPeriod(1);

		// システムが起動してからの時間をミリ単位で返す
		dwExecLastTime = 
		dwFPSLastTime  = timeGetTime();
		dwCurrentTime  = 
		nCountFrame    = 0;

		// カーソルを消す
		CUROFF();

		// 初期化処理
		Init ();

		// エスケープキーが押されるか、ゲームクリアするまでループ
		do
		{
			dwCurrentTime = timeGetTime();

			if((dwCurrentTime - dwFPSLastTime) >= 500)	// 0,5秒間隔
			{
				g_nCountFPS = nCountFrame * 1000 / (dwCurrentTime - dwFPSLastTime);
				dwFPSLastTime = dwCurrentTime;
				nCountFrame = 0;

			}//if.fin

			if((dwCurrentTime - dwExecLastTime) >= (1000 / 60))
			{
				dwExecLastTime = dwCurrentTime;

				// ポーズ処理
				bPause = Pause( bPause );

				LOCATE(1,1); printf(" ");

				// ポーズフラグがおろされている場合
				if(bPause == false)
				{
					// 更新処理
					Update ();

					// 描画処理
					Draw ();

				}//if.fin

				// カウンタのインクリメント
				nCountFrame++;

			}//if.fin

			// リッセトボタン
			if(INP(PK_R)) break;

			// プレイヤーがゴールしてエンターキーを押したら終了
			if(pField -> nCnt >= 20)
			{
				// ゲームのテーマ曲 //
				nMP3Handle = OPENMP3("Winner.mp3");					// オープン & 初期化
				PLAYMP3(nMP3Handle, 0);								// 繰り返し再生

				result();
			}//if.fin

		}while(! INP(PK_ESC));	//while.fin

		// 終了処理
		Uninit ();

		// 分解能を戻す
		timeEndPeriod(1);

		CLOSEMP3(nMP3Handle);						// 停止 & クローズ

	}while(! INP(PK_ESC));//while.fin

	// プログラムエンド
}

/*******************************************************************************
* 関数名:	void Init( void ):（初期化）関数
* 引数:		void
* 戻り値:	なし
* 説明:		各初期化関数の呼び出し
*******************************************************************************/
void Init( void )
{
	// プログラムスタート

	// 各初期化関数の呼び出し

	// プレイヤーの初期化処理
	InitPlayer ();

	// フィールドの初期化処理
	InitField  ();

	// コンピューターの初期化処理
	InitComputer();

	// プログラムエンド
}

/*******************************************************************************
* 関数名:	void Update( void ):（更新）関数
* 引数:		void
* 戻り値:	なし
* 説明:		各更新関数の呼び出し
*******************************************************************************/
void Update( void )
{
	// プログラムスタート

	// 各更新関数の呼び出し

	// プレイヤーの更新処理
	UpdatePlayer ();

	// フィールドの更新処理
	UpdateField  ();

	// コンピューターの更新処理
	UpdateComputer();

	// プログラムエンド
}

/*******************************************************************************
* 関数名:	void Draw( void ):（描画）関数
* 引数:		void
* 戻り値:	なし
* 説明:		各描画関数の呼び出し
*******************************************************************************/
void Draw( void )
{
	// プログラムスタート
	
	// 各描画関数の呼び出し

	// フィールドの描画処理
	DrawField();

	// コンピューターの描画処理
	DrawComputer();

	// プレイヤーの描画処理
	DrawPlayer ();

	// プログラムエンド
}

/*******************************************************************************
* 関数名:	void Uninit( void ):（終了）関数
* 引数:		void
* 戻り値:	なし
* 説明:		各終了関数の呼び出し
*******************************************************************************/
void Uninit( void )
{
	// プログラムスタート

	// 各終了関数の呼び出し

	// プレイヤーの終了処理
	UninitPlayer ();

	// フィールドの終了処理
	UninitField  ();

	// コンピューターの終了処理
	UninitComputer();

	// プログラムエンド
}

/*******************************************************************************
* 関数名:	bool Pause( bool bPause ):（ポーズ）関数
* 引数:		bool bPause
* 戻り値:	return bPause
* 説明:		ポーズをとり、一時停止処理させる
*******************************************************************************/
bool Pause( bool bPause )
{
	// プログラムスタート

	// Ｐが押されたら一時停止処理
	if(( INP(PK_P)) && (bPause == false))
	{
		bPause = true;

		// メッセージの表示
		COLOR(WHITE);
		LOCATE(34, 13); printf("PAUSING . . .");
		LOCATE(34, 14); printf("O(オーで戻る)");
	}
	else if((INP(PK_O)) && (bPause == true))
	{
		bPause = false;

		// メッセージの消去
		LOCATE(34, 13); printf("             ");
		LOCATE(34, 14); printf("             ");
	}//if.fin

	// メインに値を返す
	return bPause;

	// プログラムエンド
}
